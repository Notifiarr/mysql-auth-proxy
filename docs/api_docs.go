// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplateapi = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "get": {
                "description": "Retreive the environment for an API Key or Server ID. This endpoint is designed for auth proxy requests from Nginx.\nOne of X-Server, X-API-Key or X-Original-URI (with an api key in it) must be provided.",
                "tags": [
                    "auth"
                ],
                "summary": "Get user or server environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discord Server ID to route.",
                        "name": "X-Server",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Shared website secret. Required when X-Server header is provided.",
                        "name": "X-Password",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User's API Key to route. May also be provided in X-Original-URI header.",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User's API Key may be provided in this header at URI position 5: /api/v1/route/method/{key}",
                        "name": "X-Original-URI",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body is empty on success, check headers.",
                        "headers": {
                            "Age": {
                                "type": "string",
                                "description": "How long this information has been in the cache."
                            },
                            "X-API-Key": {
                                "type": "string",
                                "description": "API Key parsed from request."
                            },
                            "X-Environment": {
                                "type": "string",
                                "description": "Environment: live, dev, etc."
                            },
                            "X-Request-Time": {
                                "type": "string",
                                "description": "How long the request elapsed."
                            },
                            "X-UserID": {
                                "type": "string",
                                "description": "MySQL ID for the user whose API key was provided."
                            },
                            "X-Username": {
                                "type": "string",
                                "description": "Username for the user whose API key was provided."
                            }
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "X-API-Key": {
                                "type": "string",
                                "description": "API Key parsed from request."
                            },
                            "X-Key": {
                                "type": "string",
                                "description": "Masked API Key parsed from request."
                            },
                            "X-Length": {
                                "type": "int",
                                "description": "The length of the API key."
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete API Keys or Server IDs from internal cache.  Sending X-Server header deletes a server form cache, and sending X-Api-Keys header deletes API keys from cache.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Delete Cache Entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discord Server ID to delete.",
                        "name": "X-Server",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma separated list of API keys to delete.",
                        "name": "X-API-Keys",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cached info for API Keys or servers that were deleted.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/cache.Item"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/definitions/userinfo.UserInfo"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "208": {
                        "description": "exists: false is returned when a missing server ID is provided.",
                        "schema": {
                            "$ref": "#/definitions/webserver.noExists"
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reload": {
            "get": {
                "description": "Re-reads the config file and updates the no-auth/no-api-key-required paths.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Updates no-api-required paths",
                "responses": {
                    "200": {
                        "description": "config reloaded: true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error reading config",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Retreive internal application statistics.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Return auth proxy stats",
                "responses": {
                    "200": {
                        "description": "Auth Proxy Stats",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/stats/config": {
            "get": {
                "description": "Retreive auth proxy configuration, minus passwords.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Return auth proxy config",
                "responses": {
                    "200": {
                        "description": "Auth Proxy Config",
                        "schema": {
                            "$ref": "#/definitions/webserver.Config"
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats/key/{key}": {
            "get": {
                "description": "Retreive a user's cached info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Return cached user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's cached info.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/cache.Item"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/userinfo.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats/keys": {
            "get": {
                "description": "Retreive full cached user list.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Return all cached users",
                "responses": {
                    "200": {
                        "description": "List of cached API keys. The map key is the API key.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/cache.Item"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/definitions/userinfo.UserInfo"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats/server/{key}": {
            "get": {
                "description": "Retreive a cached server's info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Return cached server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discord Server ID",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server's cached info.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/cache.Item"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/userinfo.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats/servers": {
            "get": {
                "description": "Retreive full cached server list.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Return all cached servers",
                "responses": {
                    "200": {
                        "description": "List of cached servers. The map key is the server ID.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/cache.Item"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/definitions/userinfo.UserInfo"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cache.Item": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "data": {},
                "hits": {
                    "type": "integer"
                },
                "lastAccess": {
                    "type": "string"
                }
            }
        },
        "userinfo.UserInfo": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "webserver.Config": {
            "type": "object",
            "properties": {
                "errorFile": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "listenAddr": {
                    "type": "string"
                },
                "logFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "noAuthPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "webserver.noExists": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfoapi holds exported Swagger Info so clients can modify it
var SwaggerInfoapi = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "api",
	SwaggerTemplate:  docTemplateapi,
}

func init() {
	swag.Register(SwaggerInfoapi.InstanceName(), SwaggerInfoapi)
}
